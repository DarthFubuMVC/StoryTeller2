begin
  require 'bundler/setup'
  require 'fuburake'
rescue LoadError
  puts 'Bundler and all the gems need to be installed prior to running this rake script. Installing...'
  system("gem install bundler --source http://rubygems.org")
  sh 'bundle install'
  system("bundle exec rake", *ARGV)
  exit 0
end


@solution = FubuRake::Solution.new do |sln|
  sln.compile = {
    :solutionfile => 'src/StoryTeller.sln'
  }

  sln.assembly_info = {
    :product_name => "Storyteller",
    :copyright => "Copyright 2008-#{Time.now.year} Jeremy D. Miller, Brandon Behrens, Andrew Kharlamov, et al. All rights reserved."
  }

  sln.ripple_enabled = true
  sln.fubudocs_enabled = false

		# add these back when 3.0 is getting closer
          #:smoke_test_st_run,:smoke_test_st_run_regression
  
  sln.defaults = [
          :ilrepack
        ]
  sln.ci_steps = [:ilrepack]
  
	sln.options[:nuget_publish_folder] = 'nupkgs'
	sln.options[:nuget_publish_url] = 'https://www.myget.org/F/fubumvc-edge/'
  sln.options[:unit_test_projects] = [ "Storyteller.Core.Testing" ]
end

require_relative 'ILRepack'

desc "Merge newtonsoft assembly into the main StoryTeller project"
task :ilrepack do
  merge_newtonsoft("src/StoryTeller/bin/#{@solution.compilemode}", 'StoryTeller.dll')
end

def merge_newtonsoft(dir, assembly)
  output = File.join(dir, assembly)
  packer = ILRepack.new :out => output, :lib => dir
  packer.merge :lib => dir, :refs => [assembly, 'Newtonsoft.Json.dll'], :clrversion => @solution.options[:clrversion]
end

desc "Runs the ST command against the gallery project.  Should succeed"
task :smoke_test_st_run => [:compile] do
  sh Platform.runtime("src/ST/bin/#{@solution.compilemode}/ST.exe run src/StoryTeller.Gallery -c #{@solution.compilemode}")
end

desc "Runs the ST command against the gallery project regression tests.  Should succeed"
task :smoke_test_st_run_regression => [:compile] do
  cmd = Platform.runtime("src/ST/bin/#{@solution.compilemode}/ST.exe run src/StoryTeller.Gallery -c #{@solution.compilemode} -l Regression")
  output = `#{cmd}`
  outputLines = output.split "\n"

  exit 1 unless $?.exitstatus == 0
  exit 1 unless outputLines[outputLines.length-2] =~ /Acceptance.*0 of 0 passed.*0 failed/
  exit 1 unless outputLines[outputLines.length-1] =~ /Regression.*[1-9][0-9]* of [1-9][0-9]* passed.*0 failed/
end



